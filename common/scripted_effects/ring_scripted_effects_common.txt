

# Clears the current queue of states the fellowship will travel through (the pathstack)
ring_clear_pathstack = {
	clear_array = global.fs_path_stack
}


# Sets the health of all fellowship members to their max-health
ring_heal_fellowship = {
	custom_effect_tooltip = ring_heal_fellowship_tt

	hidden_effect = {
		SHI = {
			for_each_scope_loop = {
			    array = global.fs_members
			    
			    ring_heal_fellowship_member = yes
			}
		}
	}
}

# Gives ringbearer 1 extra HP
ring_bless_ringbearer = {
	custom_effect_tooltip = ring_bless_ringbearer_tt

	hidden_effect = {
		SHI = {
			add_to_variable = { global.fs_members^0.health = 1 }

			add_to_array = { global.fs_eventlog_prefix_targets = THIS }
			add_to_array = { global.fs_eventlog_suffix_targets = 0 }
			add_to_array = { global.fs_eventlog = token:fs_event_country_ringbearer_blessed_member }
			ring_trim_eventlog = yes
		}
	}
}

# Reduces the health and dexterity of a random member
ring_curse_random_fellowship_member = {
	custom_effect_tooltip = ring_curse_random_fellowship_member_tt

	hidden_effect = {
		SHI = {
			random_scope_in_array = {
				array = global.fs_members
				limit = {
					check_variable = { defense_level > 1 }
					check_variable = { logistics_level > 1 }
				}
				
				THIS = { ring_curse_member = yes }
			}
		}
	}
}

# Reduces the health and dexterity
ring_curse_member = {
	add_logistics = -1
	add_defense = -1

	if = {
		limit = { check_variable = { health > 1 } }
		subtract_from_variable = { health = 1 }
	}

	add_to_array = { global.fs_eventlog_prefix_targets = THIS }
	add_to_array = { global.fs_eventlog_suffix_targets = 0 }
	add_to_array = { global.fs_eventlog = token:fs_event_country_curse_fellowship_member }
	ring_trim_eventlog = yes
}


# Gives a random fellowship member +2 hp and +2 attack
ring_gear_up_random_member = {
	custom_effect_tooltip = ring_gear_up_random_member_tt

	hidden_effect = {
		random_scope_in_array = {
		    array = global.fs_members
		    
		    THIS = {
		    	add_attack = 2
				add_defense = 2
		    }

		    add_to_array = { global.fs_eventlog_prefix_targets = ROOT }
			add_to_array = { global.fs_eventlog_suffix_targets = THIS }
			add_to_array = { global.fs_eventlog = token:fs_event_country_helps_fellowship }
			ring_trim_eventlog = yes
		}
	}
}


# Sets the health of a fellowship member to their max-health
ring_heal_fellowship_member = {
	set_variable = { health = army_defense_level }
}


# Opens/Closes the details view
ring_toggle_details_view = {
	if = {
		limit = { has_country_flag = elven_alliance_details_view_open }
		clr_country_flag = elven_alliance_details_view_open
	}
	if = {
		limit = { has_country_flag = ring_details_view_open }
		clr_country_flag = ring_details_view_open
	}
	# To keep the UI clean and smooth, we won't allow this to open when interception_form is open
	else_if = {
		limit = { NOT = { has_country_flag = ring_interception_form_open } }
		set_country_flag = ring_details_view_open
	}
}


# Ensures that the evenlog is no longer than 25 entries, removing older entries first
ring_trim_eventlog = {

	while_loop_effect = {
	    limit = { check_variable = { global.fs_eventlog_prefix_targets^num > 25 } }
	    remove_from_array = { array = global.fs_eventlog_prefix_targets index = 0 }
	}

	while_loop_effect = {
	    limit = { check_variable = { global.fs_eventlog_suffix_targets^num > 25 } }
	    remove_from_array = { array = global.fs_eventlog_suffix_targets index = 0 }
	}

	while_loop_effect = {
	    limit = { check_variable = { global.fs_eventlog^num > 25 } }
	    remove_from_array = { array = global.fs_eventlog index = 0 }
	}
}


# Adds the current scope as a member of the fellowship (logs it to the eventlog as well)
ring_add_member_to_fellowship = {

	if = {
		limit = { check_variable = { global.fs_members^num < 12 } } # Do not allow more than 12 members. the UI won't work.

		add_to_array = { global.fs_eventlog_prefix_targets = THIS }
		add_to_array = { global.fs_eventlog_suffix_targets = 0 }
		add_to_array = { global.fs_eventlog = token:fs_event_member_joins }
		ring_trim_eventlog = yes

		ring_add_member_to_fellowship_nolog = yes
	}
}


# Adds/Removes the current scope as a member of the hunting party of ROOT
ring_toggle_member_to_hunting_party = {

	if = {
		limit = { NOT = { has_character_flag = fs_assigned_to_hunting_party } }
		ring_add_member_to_hunting_party = yes
	}
	else = {
		ring_remove_member_from_hunting_party = yes
	}
}


# Adds the current scope as a member of the hunting party of ROOT
ring_add_member_to_hunting_party = {

	if = {
		limit = {
			# dont assign dead people
			OR = {
				NOT = { has_variable = isdead }
				NOT = { check_variable = { isdead = 1 } }
			}
			NOT = { has_character_flag = fs_assigned_to_hunting_party } # dont assign twice
		}

		# Set this characters starting HP
		THIS = { set_variable = { health = army_defense_level } }

		add_to_array = { ROOT.fs_hunting_party = THIS }

		set_character_flag = fs_assigned_to_hunting_party
	}
}


# Adds the current scope as a member of the fellowship, but does NOT log this to the eventlog
ring_add_member_to_fellowship_nolog = {

	if = {
		limit = {
			check_variable = { global.fs_members^num < 12 } # Do not allow more than 12 members. the UI won't work.
			check_variable = { isdead = 0 }					# dont assign dead people
		}

		if = {
			limit = { NOT = { has_variable = health } }

			# Set this characters starting vars
			THIS = { set_variable = { health = army_defense_level } }
			THIS = { set_variable = { isdead = 0 } }
		}

		add_to_array = { global.fs_members = THIS }
	}
}


# Removes the current scope from the fellowship
ring_remove_member_from_fellowship = {

	if = {
		limit = { ring_is_fs_member = yes }

		add_to_array = { global.fs_eventlog_prefix_targets = THIS }
		add_to_array = { global.fs_eventlog_suffix_targets = 0 }
		add_to_array = { global.fs_eventlog = token:fs_event_member_leaves }
		ring_trim_eventlog = yes
		
		remove_from_array = { global.fs_members = THIS }
	}
}


# Removes the current scope from the fellowship, but does NOT log this to the eventlog
ring_remove_member_from_fellowship_nolog = {

	if = {
		limit = { ring_is_fs_member = yes }
		remove_from_array = { global.fs_members = THIS }
	}
}


# Removes the current scope from the hunting party of ROOT
ring_remove_member_from_hunting_party = {

	if = {
		limit = { is_in_array = { ROOT.fs_hunting_party = THIS } }

		remove_from_array = { ROOT.fs_hunting_party = THIS }
		clr_character_flag = fs_assigned_to_hunting_party
	}
}


# Clears all members from the fellowship, does NOT add an entry to the eventlog
ring_clear_fellowship_members = {

	clear_array = global.fs_members
}


# Clears the hunting party of ROOT
ring_clear_hunting_party = {

	for_each_scope_loop = {
    	array = ROOT.fs_hunting_party
	    
	    clr_character_flag = fs_assigned_to_hunting_party
	}

	clear_array = ROOT.fs_hunting_party
}


# Adds an entry to the eventlog stating that the fellowship has arrived in the current scope
ring_log_arrived_in_new_state = {

	add_to_array = { global.fs_eventlog_prefix_targets = 0 }
	add_to_array = { global.fs_eventlog_suffix_targets = THIS }
	add_to_array = { global.fs_eventlog = token:fs_event_arrive_in_new_state }
	ring_trim_eventlog = yes
}


# Queues up an event to move into the next state (fs.1000)
ring_fellowship_begin_move_to_next_state = {

	# horseback-speed
	if = {
		limit = { has_global_flag = fs_on_horseback }
		set_variable = { global.fs_days_left_in_state = 20 }
	}
	# river-boat speed
	else_if = {
		limit = { has_global_flag = fs_on_boat }
		set_variable = { global.fs_days_left_in_state = 30 }
	}
	# two hobbits on foot, not knowing wtf they're doing
	else_if = {
		limit = { has_global_flag = fs_post_argonath }
		set_variable = { global.fs_days_left_in_state = 120 }
	}
	# base speed
	else = {
		set_variable = { global.fs_days_left_in_state = 65 }
	}

	# Slow fellowship down by 50% in Mordor territory
	if = {
		limit = {
			var:global.fs_currentstate = {
				controller = {
					OR = {
						tag = MOR
						is_ally_with = MOR
					}
				}
			}
		}
		multiply_variable = { global.fs_days_left_in_state = 1.5 }
		round_variable = global.fs_days_left_in_state
	}
}


ring_destroy_ring = {
	# Remove BOPs
	var:global.fs_ring_owner = {
		if = {
			limit = { has_power_balance = { id = ring_corruption_balance } }
			remove_power_balance = { id = ring_corruption_balance }
		}
	}

	if = {
		limit = { MOR = { has_government = belligerent } }
		MOR = { country_event = { days = 12 id = fs.106 } }
	}

	set_global_flag = fs_ring_destroyed
	ring_clear_pathstack = yes
	ring_clear_fellowship_members = yes
	news_event = { hours = 12 id = news.376 }
}


# Update variables used for the ring corruption BOP
ring_update_bop_values = {
	if = {
		limit = { NOT = { has_variable = ring_bop_casualties } }
		set_variable = { ring_bop_casualties = casualties_k }
	}
	set_variable = { ring_bop_casualties_diff = casualties_k }
	subtract_from_variable = { ring_bop_casualties_diff = ring_bop_casualties }

	if = {
		limit = { NOT = { has_variable = ring_bop_stability } }
		set_variable = { ring_bop_stability = stability }
	}
	set_variable = { ring_bop_stability_diff = stability }
	subtract_from_variable = { ring_bop_stability_diff = ring_bop_stability }

	if = {
		limit = { NOT = { has_variable = ring_bop_warsupport } }
		set_variable = { ring_bop_warsupport = has_war_support }
	}
	set_variable = { ring_bop_warsupport_diff = has_war_support }
	subtract_from_variable = { ring_bop_warsupport_diff = ring_bop_warsupport }
}


# Runs every day. Pls keep as simple as possible for best performance
# Note to self: Maybe make this a weekly update instead?
ring_daily_update = {
	if = {
		limit = {
			has_global_flag = fs_ring_seized
			NOT = { has_global_flag = fs_ring_destroyed }
			var:global.fs_ring_owner = { NOT = { tag = MOR } }
		}
		var:global.fs_ring_owner = {
			ring_update_bop_values = yes
		}
		MOR = {
			ring_update_bop_values = yes
		}
	}

	if = {
		# Update fs_days_left_in_state
		limit = { check_variable = { global.fs_days_left_in_state > 0 } }
		subtract_from_variable = { global.fs_days_left_in_state = 1 }

		# When the timer runs out, move fellowship to the next state
		if = {
			limit = {
				check_variable = {
					var = global.fs_days_left_in_state
					value = 0
					compare = less_than_or_equals
				}
			}

			# This event moves the fellowship to the enxt state
			#log = "FS_STEP"
			SHI = { execute_fellowship_step = yes }
		}
	}
}


# Opens up the interception attempt prompt, allowing the country to launch an attempt
ring_open_interception_attempt_prompt = {
	custom_effect_tooltip = ring_open_interception_attempt_prompt_tt

	hidden_effect = {
		# Special case for AI
		if = {
			limit = { is_ai = yes }

			ring_ai_commence_interception_attempt = yes
		}
		# the "normal" way
		else = {
			clr_country_flag = ring_details_view_open

			# Only one week to select interception group
			# NOT: do NOT change the 7 day countdown without fixing the GetDayLeftBeforeAutoAbort scripted localization!!
			set_country_flag = {
			    flag = ring_interception_form_open
			    days = 7
			    value = 1
			}
		}
	}
}


# The AI will start an interception attempt, automatically selecting a hunting party etc.
ring_ai_commence_interception_attempt = {

	# this should be taken care of in decisions
	#set_country_flag = fs_has_used_action

	# If isengard -> make sure Lurtz leads the pack
	if = {
		limit = {
			ROOT = {
				tag = ISE 
				ISE_lurtz = { is_army_leader = yes } 
			}
		}
		ISE_lurtz = {
			ring_add_member_to_hunting_party = yes
		}

	}

	# select hunting party
	for_each_scope_loop = {
	    array = ROOT.army_leaders
	    if = {
	        limit = {
	            check_variable = { ROOT.fs_hunting_party^num < 9 }
	        }
	        random_list = {
	        	90 = {
	        		ring_add_member_to_hunting_party = yes
	        		modifier = {
	        			has_character_flag = fs_never_send_on_interception
	        			factor = 0
	        		}
	        	}
	        	15 = {
	        		# Filter out a couple of important figures like Theodred, the Ferny bros etc.
	        		modifier = {
	        			has_character_flag = fs_avoid_sending_on_interception
	        			factor = 7
	        		}
	        		modifier = {
	        			has_character_flag = fs_strongly_avoid_sending_on_interception
	        			factor = 18
	        		}
	        	}
	        }
	    }
	}

	# set acceptable casualty rate
	if = {
		limit = { OR = { tag = ISE tag = MOR } }
		set_variable = { ROOT.fs_max_casualty_rate = 1.0 }
	}
	else_if = {
		limit = { OR = { tag = MOC } }
		set_variable = { ROOT.fs_max_casualty_rate = 0.3 } # MOC has few generals + cave troll. This is lower in order to try to keep Gulthurg alive lol
	}
	else = {
		set_variable = { ROOT.fs_max_casualty_rate = 0.5 }
	}

	# launch
	ring_execute_interception_attempt = yes
}


# Aborts an interception attempt whilst the prompt is open
ring_abort_interception_attempt = {
	clr_country_flag = ring_interception_form_open

	ring_clear_hunting_party = yes

	add_to_array = { global.fs_eventlog_prefix_targets = ROOT }
	add_to_array = { global.fs_eventlog_suffix_targets = 0 }
	add_to_array = { global.fs_eventlog = token:fs_event_interception_aborted }
	ring_trim_eventlog = yes

	# We still wanna breakup the fellowship if argonath raid is cancelled
	if = {
		limit = {
			has_country_flag = is_argonath_raid
		}
		ring_breakup_fellowship = yes
	}
}


# Executes an interception attempt by the current scope
ring_execute_interception_attempt = {

	set_temp_variable = { fs_interception_cancelled = 0 }

	# Maximum amount of casualties before disengaging
	set_temp_variable = { fs_interception_max_casualties = ROOT.fs_hunting_party^num }
	multiply_temp_variable = { fs_interception_max_casualties = ROOT.fs_max_casualty_rate }

	# Because its easier to calculate: Min. number of party members to keep fighting
	set_temp_variable = { fs_interception_min_members = ROOT.fs_hunting_party^num }
	subtract_from_temp_variable = { fs_interception_min_members = fs_interception_max_casualties }

	add_to_array = { global.fs_eventlog_prefix_targets = ROOT }
	add_to_array = { global.fs_eventlog_suffix_targets = ROOT.fs_hunting_party^0 }
	add_to_array = { global.fs_eventlog = token:fs_event_tries_to_intercept }
	ring_trim_eventlog = yes

	ring_interception_detection_check = yes

	for_loop_effect = {
	    end = 5
	    value = temp_attempt

	    if = {
			limit = { check_variable = { fs_interception_cancelled = 0 } }

	    	ring_interception_single_attempt = yes
    	}
	}

	# special case: if this is orcs attacking with cave-troll, the troll keeps fighting for a while longer
	if = {
		limit = {
			tag = MOC
			NOT = { ring_ringbearer_is_dead = yes }
			MOC_cavetroll = { is_in_array = { ROOT.fs_hunting_party = THIS } }
			MOC_cavetroll = { check_variable = { health > 0 } }
		}

		# clear hunting party *except* for the troll
		MOC_cavetroll = {
			set_temp_variable = { temp_ct_hp = health }	
			ring_clear_hunting_party = yes
			ring_add_member_to_hunting_party = yes
			set_variable = { health = var:temp_ct_hp }
		}

		add_to_array = { global.fs_eventlog_prefix_targets = ROOT }
		add_to_array = { global.fs_eventlog_suffix_targets = 0 }
		add_to_array = { global.fs_eventlog = token:fs_event_fellowship_troll_keeps_fighting }
		ring_trim_eventlog = yes

		set_temp_variable = { fs_interception_cancelled = 0 }

		for_loop_effect = {
		    end = 3
		    value = temp_attempt

		    ring_interception_execute_combat = yes
		}
	}

	# eventlog if fellowship killed the entire hunting party
	if = {
		limit = {
			NOT = { ring_ringbearer_is_dead = yes }
			check_variable = { ROOT.fs_hunting_party^num < 1 }
		}

		add_to_array = { global.fs_eventlog_prefix_targets = ROOT }
		add_to_array = { global.fs_eventlog_suffix_targets = 0 }
		add_to_array = { global.fs_eventlog = token:fs_event_fellowship_kills_all_enemies }
		ring_trim_eventlog = yes
	}

	# if the for-loop ran to end without cancelling, let the fellowship escape
	else_if = {
		limit = {
			NOT = { ring_ringbearer_is_dead = yes }
			check_variable = { fs_interception_cancelled = 0 }
		}

		add_to_array = { global.fs_eventlog_prefix_targets = 0 }
		add_to_array = { global.fs_eventlog_suffix_targets = ROOT }
		add_to_array = { global.fs_eventlog = token:fs_event_fellowship_escapes }
		ring_trim_eventlog = yes

		# send the bad news home
		ROOT = { country_event = fs.102 }
	}

	# break up fellowship if this was the argonath raid
	if = {
		limit = {
			has_country_flag = is_argonath_raid
			NOT = { has_global_flag = fs_ring_seized }
		}

		clr_country_flag = is_argonath_raid
		ring_breakup_fellowship = yes
	}
}


# Fills the hunting party with all 9 nazgul that are still alive
ring_MOR_set_hunting_party_to_nazgul = {
	MOR = {
		ring_clear_hunting_party = yes

		MOR_Witch_king		= { ring_add_member_to_hunting_party = yes }
		MOR_Khamul			= { ring_add_member_to_hunting_party = yes }
		MOR_Uvantha			= { ring_add_member_to_hunting_party = yes }
		MOR_Hoarmurath		= { ring_add_member_to_hunting_party = yes }
		MOR_Dwar			= { ring_add_member_to_hunting_party = yes }
		MOR_Adunaphel		= { ring_add_member_to_hunting_party = yes }
		MOR_Akhorahil		= { ring_add_member_to_hunting_party = yes }
		MOR_Ji_Indur		= { ring_add_member_to_hunting_party = yes }
		MOR_Ren				= { ring_add_member_to_hunting_party = yes }
	}
}

# Runs a detection check if ROOT can detect the fellowship
# ARGS: ROOT.fs_hunting_party, global.fs_members
# RETURN: If the check fails, it sets fs_interception_cancelled to 1
ring_interception_detection_check = {
	if = {
		# Argonath raid does not require stealth-check
		limit = {
			NOT = { has_country_flag = is_argonath_raid }

			# neither does Lothlorien
			ROOT = { NOT = { tag = LTH } }
		}

		# Calculate average fellowship stealth skill (planning_skill)
		set_temp_variable = { temp_avg_fs_stealth = 0 }
		for_each_scope_loop = {
		    array = global.fs_members
		    
		    add_to_temp_variable = { temp_avg_fs_stealth = planning_level }
		}
		divide_temp_variable = { temp_avg_fs_stealth = global.fs_members^num }

		# Calculate the average stealth skill of the hunting party
		set_temp_variable = { temp_avg_hp_stealth = 0 }
		for_each_scope_loop = {
		    array = ROOT.fs_hunting_party
		    
		    add_to_temp_variable = { temp_avg_hp_stealth = planning_level }
		}
		divide_temp_variable = { temp_avg_hp_stealth = ROOT.fs_hunting_party^num }
		# Hunting party gets 200% bonus because this is their home turf
		multiply_temp_variable  = { temp_avg_hp_stealth = 2 }

		# these countries get an additional detection bonus
		if = {
			limit = { ROOT = { OR = { tag = MOC tag = ISE } } }
			multiply_temp_variable  = { temp_avg_hp_stealth = 3 }
		}

		# ring-catcher bonus
		if = {
			limit = { has_idea_with_trait = ring_catcher }
			multiply_temp_variable  = { temp_avg_hp_stealth = 2 }
		}

		# Check which side wins:
		random_list = {
			var:temp_avg_fs_stealth = {
				# Fellowship wins -> remains undetected
				set_temp_variable = { fs_interception_cancelled = 1 }

				# Add to eventlog
				add_to_array = { global.fs_eventlog_prefix_targets = ROOT }
				add_to_array = { global.fs_eventlog_suffix_targets = 0 }
				add_to_array = { global.fs_eventlog = token:fs_event_failed_to_locate }
				ring_trim_eventlog = yes
			}
			var:temp_avg_hp_stealth = {
				# Hunting party wins -> fellowship located -> interception proceeds

				# Add to eventlog
				add_to_array = { global.fs_eventlog_prefix_targets = ROOT }
				add_to_array = { global.fs_eventlog_suffix_targets = 0 }
				add_to_array = { global.fs_eventlog = token:fs_event_managed_to_locate }
				ring_trim_eventlog = yes
			}
		}
	}
}


# Runs a single attempt of ROOT trying to intercept the ring
# Attempts generally follow this loop: combat -> attempt to seize the ring -> disengage or repeat
# ARGS: temp_attempt (attempt number), ROOT.fs_hunting_party, global.fs_members
# RETURN: Sets fs_interception_cancelled to 1 if ring was seized or combat was disengaged
ring_interception_single_attempt = {

	ring_interception_execute_combat = yes

	ring_interception_disengage_check = yes
}


# Runs a single attack of one character onto another
# ARGS: temp_attacker, temp_defender (Attacking and defending characters)
ring_combat_execute_attack = {

	if = {
		# Dont run this if we fucked up with the parameters somewhere
		limit = {
			var:temp_defender = { has_variable = health }
			var:temp_attacker = { has_variable = health }
		}

		# Get defender dexterity
		var:temp_defender = {

			set_temp_variable = { temp_defender_dex = logistics_level }
		}

		# Dex check
		random_list = {
			4 = {
				# deal damage (eventlog is taken care of in that function)
				ring_combat_deal_damage = yes
			}
			var:temp_defender_dex = {
				# eventlog: defender dodges attack
				add_to_array = { global.fs_eventlog_prefix_targets = temp_attacker }
				add_to_array = { global.fs_eventlog_suffix_targets = temp_defender }
				add_to_array = { global.fs_eventlog = token:fs_event_char_attacks_char_miss }
				ring_trim_eventlog = yes
			}
		}	
	}
	else = {
		log = "Wrong ring_combat_execute_attack args: [?temp_defender.GetName] [?temp_attacker.GetName]"
	}
}


# One character deals damage to another
# Lowers the defenders health by the attackers attack_level. If the health reaches <0, kills the defender
# ARGS: temp_attacker, temp_defender (damage dealer and taker)
ring_combat_deal_damage = {
	if = {
		# Dont run this if we fucked up with the parameters somewhere
		limit = {
			var:temp_defender = { has_variable = health }
			var:temp_attacker = { has_variable = health }
		}

		# Get attack attack
		var:temp_attacker = {

			set_temp_variable = { temp_attacker_attack = attack_level }
		}

		# subtract from health
		var:temp_defender = {

			subtract_from_variable = { health = temp_attacker_attack }

			# add damage dealt to eventlog
			if = {
				limit = { var:temp_attacker = { check_variable = { attack_level = 1 } } }
				add_to_array = { global.fs_eventlog_prefix_targets = temp_attacker }
				add_to_array = { global.fs_eventlog_suffix_targets = temp_defender }
				add_to_array = { global.fs_eventlog = token:fs_event_char_attacks_char_1dmg }
				ring_trim_eventlog = yes
			}
			else_if = {
				limit = { var:temp_attacker = { check_variable = { attack_level = 2 } } }
				add_to_array = { global.fs_eventlog_prefix_targets = temp_attacker }
				add_to_array = { global.fs_eventlog_suffix_targets = temp_defender }
				add_to_array = { global.fs_eventlog = token:fs_event_char_attacks_char_2dmg }
				ring_trim_eventlog = yes
			}
			else_if = {
				limit = { var:temp_attacker = { check_variable = { attack_level = 3 } } }
				add_to_array = { global.fs_eventlog_prefix_targets = temp_attacker }
				add_to_array = { global.fs_eventlog_suffix_targets = temp_defender }
				add_to_array = { global.fs_eventlog = token:fs_event_char_attacks_char_3dmg }
				ring_trim_eventlog = yes
			}
			else = {
				add_to_array = { global.fs_eventlog_prefix_targets = temp_attacker }
				add_to_array = { global.fs_eventlog_suffix_targets = temp_defender }
				add_to_array = { global.fs_eventlog = token:fs_event_char_attacks_char_massivedmg }
				ring_trim_eventlog = yes
			}

			# check for death
			if = {
				limit = {
					check_variable = { health < 1 }
				}
				ring_combat_kill_character = yes
			}
		}
	}
	else = {
		log = "Wrong ring_combat_execute_attack args: [?temp_defender.GetName] [?temp_attacker.GetName]"
	}
}


# Kills the current scope
# Can be both fellowship or hunting-party member
ring_combat_kill_character = {

	if = {
		limit = { THIS = { check_variable = { isdead = 0 } } } # cant kill someone who is already dead

		# eventlog
		add_to_array = { global.fs_eventlog_prefix_targets = THIS }
		add_to_array = { global.fs_eventlog_suffix_targets = 0 }
		add_to_array = { global.fs_eventlog = token:fs_event_char_dies }
		ring_trim_eventlog = yes

		set_variable = { THIS.isdead = 1 }

		ring_remove_member_from_hunting_party = yes
		ring_remove_member_from_fellowship_nolog = yes

		# This makes the character unusable by everyone
		retire = yes

		# check if frodo is dead
		ROOT = {
			ring_try_seize = yes
		}

		# Check if gandalf dead
		if = {
			limit = { ring_gandalf_is_dead = yes }
			set_global_flag = fs_gandalf_left_fellowship
		}
	}
}


# Runs a single combat-instance between fellowship and hunting party
# A combat instance looks like this: random member of hunting party attacks random member from fellowship,
# Then a random fellowship member counter-attacks a random member from the hunting party
# ARGS: ROOT.fs_hunting_party, global.fs_members
# RETURN: Sets fs_interception_cancelled = 1 if either party is empty
ring_interception_execute_combat = {
	
	# Back-and-forth attack
	ring_interception_combat_hp_attack_fs = yes

	ring_interception_combat_fs_attack_hp = yes
}


# Executes a single attack of the hunting party onto the fellowship
ring_interception_combat_hp_attack_fs = {
	# HUNTING PARTY ATTACK
	if = {
		# Only run this if both parties still have people alive
		limit = {
			check_variable = { ROOT.fs_hunting_party^num > 0 }
			check_variable = { global.fs_members^num > 0 }
		}

		# select random member from hunting party
	    random_scope_in_array = {
		    array = ROOT.fs_hunting_party
		    
		    set_temp_variable = { temp_attacker = THIS }
	    }

	    # select random member from fellowship
	    random_scope_in_array = {
		    array = global.fs_members
		    
		    set_temp_variable = { temp_defender = THIS }
	    }

	    # If the defender is Frodo, reroll
	    # (To reduce the amount of pure luck ring interceptions)
	    # NOTE: For some reason it feels like Frodo gets picked absurdly often for defense. That's why this is here
	    if = {
	    	limit = {
	    		SHI = { var:temp_defender = { is_character = FS_frodo } }
	    		check_variable = { global.fs_members^num > 3 }
	    	}

	    	random_list = {
	    		50 = {
	    			random_scope_in_array = {
					    array = global.fs_members
					    
					    set_temp_variable = { temp_defender = THIS }
				    }
	    		}
	    		50 = {
	    			# AI discrimnation lol
	    			modifier = {
	    				factor = 3
	    				is_ai = no
	    			}
	    		}
	    	}
	    }

	    ring_combat_execute_attack = yes
    }
    else = {
    	set_temp_variable = { fs_interception_cancelled = 1 }
    }
}


# Executes a single attack of the fellowship onto the hunting party
ring_interception_combat_fs_attack_hp = {
	# FELLOWSHIP COUNTER-ATTACK: (Exactly the same as above but reversed)
    if = {
		# Only run this if both parties still have people alive
		limit = {
			check_variable = { ROOT.fs_hunting_party^num > 0 }
			check_variable = { global.fs_members^num > 0 }
		}

	    # select random member from hunting party
	    random_scope_in_array = {
		    array = global.fs_members
		    
		    set_temp_variable = { temp_attacker = THIS }
	    }

	    # select random member from fellowship
	    random_scope_in_array = {
		    array = ROOT.fs_hunting_party
		    
		    set_temp_variable = { temp_defender = THIS }
	    }

	    ring_combat_execute_attack = yes
    }
    else = {
    	set_temp_variable = { fs_interception_cancelled = 1 }
    }
}


# Runs a single attempt of the hunting party (ROOT) trying to take the ring
# Implementation (for now): You only take the ring of Frodo dies
ring_try_seize = {
	
	if = {
		limit = { ring_ringbearer_is_dead = yes }

		log = "RINGBEARER IS DEAD. RING SEIZED"

		ring_seize_ring = yes
	}
}


# Runs a single chance at the hunting party disengaging combat with the fellowship
# ARGS: temp_attempt (Attempt number at taking ring)
# RETURN: Sets fs_interception_cancelled = 1 if disengaged
ring_interception_disengage_check = {

	if = {
		# Check if we WANT to disengage in the first place
		limit = { 
			NOT = { check_variable = { ROOT.fs_hunting_party^num > fs_interception_min_members } }
		}

		random_list = {
			1 = {
				# Disengage fails
			}
			4 = {
				# disengage
				set_temp_variable = { fs_interception_cancelled = 1 }

				# eventlog
				if = {
					limit = {
						check_variable = { ROOT.fs_hunting_party^num > 0 }
						# dont display this message with cave troll
						NOT = { AND = {
							tag = MOC
							MOC_cavetroll = { is_in_array = { ROOT.fs_hunting_party = THIS } }
						} }
					}

					add_to_array = { global.fs_eventlog_prefix_targets = ROOT.fs_hunting_party^0 }
					add_to_array = { global.fs_eventlog_suffix_targets = 0 }
					add_to_array = { global.fs_eventlog = token:fs_event_disengages }
					ring_trim_eventlog = yes
				}
			}
		}
	}
}


ring_increase_corruption = {
	add_power_balance_value = {
		id = ring_corruption_balance
		value = 0.1
	}
}

ring_increase_corruption_2 = {
	add_power_balance_value = {
		id = ring_corruption_balance
		value = 0.2
	}
}

ring_decrease_corruption = {
	add_power_balance_value = {
		id = ring_corruption_balance
		value = 0.1
	}
}

ring_decrease_corruption_2 = {
	add_power_balance_value = {
		id = ring_corruption_balance
		value = 0.2
	}
}

ring_give_sauron_ring = {
	custom_effect_tooltip = corruption_bad_corrupted_tt
	hidden_effect = {
		if = {
			limit = {
				original_tag = LTH
				NOT = { has_completed_focus = lth_givesauronthering }
			}
			complete_national_focus = lth_givesauronthering
		}

		MOR = { ring_seize_ring = yes }	
	}
}

# THIS gets the ring (NOT ROOT!)
ring_seize_ring = {

	hidden_effect = {
		log = "RING SEIZED"

		if = {
			limit = {
				tag = LTH
				NOT = { has_completed_focus = lth_seizetheonering }
			}
			LTH = { complete_national_focus = lth_seizetheonering }
		}
		# Ring was seized for the first time through events in Lothlorien -> Elven Fellowship available
		if = {
			limit = {
				tag = LTH
				check_variable = { global.fs_currentstate = 75 }
				NOT = { has_global_flag = fs_ring_seized }
			}
			set_global_flag = fs_ring_seized_in_lth
		}
		else = {
			clr_global_flag = fs_ring_seized_in_lth
		}
		
		set_variable = { global.fs_days_left_in_state = 0 }

		# eventlog
		add_to_array = { global.fs_eventlog_prefix_targets = THIS }
		add_to_array = { global.fs_eventlog_suffix_targets = 0 }
		add_to_array = { global.fs_eventlog = token:fs_event_takes_the_ring }
		ring_trim_eventlog = yes

		set_global_flag = fs_ring_seized
		var:global.fs_ring_owner = {
			ring_remove_ring = yes
		}
		THIS = {
			set_variable = { global.fs_ring_owner = THIS }
			ring_add_ring = yes
		}

		ring_clear_fellowship_members = yes
		ring_clear_pathstack = yes
	}
}

ring_remove_ring = {
	if = {
		limit = { has_idea = one_true_ring }
		remove_ideas = one_true_ring
	}
	else_if = {
		limit = { has_idea = one_true_ring_2 }
		remove_ideas = one_true_ring_2
	}
	remove_power_balance = { id = ring_corruption_balance }
}

ring_add_ring = {
	if = {
		limit = { has_global_flag = ring_merged_with_nenya }
		add_ideas = one_true_ring_2
	}
	else = {
		add_ideas = one_true_ring
	}
	# add BOP to new owner
	if = {
		limit = { NOT = { tag = MOR } } # MOR can't corrupt themselves lol
		set_power_balance = {
			id = ring_corruption_balance
			set_default = yes
		}
	}
	ring_update_bop_values = yes
	MOR = {
		ring_update_bop_values = yes
	}
}

ring_upgrade_ring = {
	set_global_flag = ring_merged_with_nenya
	swap_ideas = {
		remove_idea = one_true_ring
		add_idea = one_true_ring_2
	}
}


ring_rivendell_approves = {
	if = {
		limit = { RIV = { NOT = { is_ally_with = MOR } } }

		RIV = {
			add_opinion_modifier = {
	    		target = ROOT
	    		modifier = small_increase
			}
		}
	}
}

ring_rivendell_disapproves = {
	if = {
		limit = { RIV = { NOT = { is_ally_with = MOR } } }

		RIV = {
			add_opinion_modifier = {
	    		target = ROOT
	    		modifier = small_decrease
			}
		}
	}
}


ring_set_ring_attitude = {
	if = {
		limit = {
			NOT = { ring_has_special_interaction = yes }
		}

		random_list = {
			10 = {
				modifier = {
					factor = 3
					is_historical_focus_on = yes
				}
				modifier = {
					factor = 2
					tag = ROH
				}
				set_country_flag = fs_neutral_attitude
			}
			28 = {
				set_country_flag = fs_hostile_attitude
				modifier = {
					factor = 2
					tag = ANG
				}
				modifier = {
					factor = 2
					tag = ENE
				}
			}
			15 = {
				set_country_flag = fs_friendly_attitude
			}
		}
	}
}