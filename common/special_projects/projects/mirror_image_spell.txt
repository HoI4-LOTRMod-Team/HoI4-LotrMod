
sp_mirror_image_spell = {

	specialization = specialization_laboratory

	project_tags = sp_tag_artillery

	allowed = {
		always = yes
	}

	visible = {
		always = yes
	}
	
	available = {
		FROM = {
			has_tech = basic_encryption
			has_tech = infiltrators_tech
			has_tech = magic
		}
	}
	
	prototype_time = sp_time.prototype.medium 
	complexity = sp_complexity.medium

	breakthrough_cost = {
		specialization_laboratory = 3
	}

	resource_cost = {
		resources = { aluminium=1 }
	}
	
	project_output = {
		country_effects = {
			sp_mirror_image_create_fake_divisions = yes
		}
	}

	generic_prototype_rewards = {
		sp_generic_reward_scientist_xp_1
        sp_generic_reward_scientist_xp_2
        sp_generic_reward_scientist_xp_3
        sp_generic_reward_army_xp_1
        sp_generic_reward_army_xp_2
        sp_generic_reward_army_xp_3
        sp_generic_reward_major_progress_1
        sp_generic_reward_major_progress_2
        sp_generic_reward_major_progress_3
        sp_generic_reward_test_failure_1
        sp_generic_reward_test_failure_2
        sp_generic_reward_test_failure_3
        sp_generic_reward_resource_scarcity
        sp_generic_reward_critical_failure
        sp_generic_reward_major_failure
        sp_generic_reward_knowledge_magic_tech
        sp_generic_reward_knowledge_intrigue_tech
	}

	unique_prototype_rewards = {

		
		sp_mirror_image_spell_use_light = {
			fire_only_once = yes

			threshold = { 
				min = 0
				max = 50
			}

			weight = {
				base = 40
			}

			
			option = {
				token = sp_mirror_image_spell_use_light_yes
				
				iteration_output = {
					country_effects = {
						FROM = { set_project_flag = sp_mirror_image_spell_use_light_yes }
						custom_effect_tooltip = sp_mirror_image_spell_use_light_yes_tt
						if = {
							limit = { NOT = { has_variable = sp_mirror_image_duration } }
							set_variable = { sp_mirror_image_duration = 120 }
						}
						add_to_variable = { sp_mirror_image_duration = 100 }
					}
				}
			}

			option = {
				token = sp_mirror_image_spell_use_light_no
				
				iteration_output = {
					country_effects = {
						FROM = { set_project_flag = sp_mirror_image_spell_use_light_no }
						custom_effect_tooltip = sp_mirror_image_spell_use_light_no_tt
						set_country_flag = sp_mirror_image_increase_amount
					}
				}
			}

        }

		sp_mirror_image_spell_unexpected_success = {
			fire_only_once = yes

			threshold = { 
				min = 70
				max = 100
			}

			weight = {
				base = 15
			}

			
			option = {
				token = sp_mirror_image_spell_unexpected_success_yes
				
				iteration_output = {
					country_effects = {
						custom_effect_tooltip = sp_mirror_image_spell_unexpected_success_yes_tt
						FROM = { set_project_flag = sp_mirror_image_spell_unexpected_success_yes }
						if = {
							limit = { NOT = { has_variable = sp_mirror_image_duration } }
							set_variable = { sp_mirror_image_duration = 120 }
						}
						add_to_variable = { sp_mirror_image_duration = 200 }
					}
				}
			}

			option = {
				token = sp_mirror_image_spell_unexpected_success_no
				
				iteration_output = {
					# get civs
					country_effects = {
						add_timed_idea = {
							idea = three_civs_gain
							days = 70
						}
					}
				}
			}

        }

		sp_mirror_image_spell_failure = {
			fire_only_once = yes

			threshold = { 
				min = 80
				max = 100
			}

			weight = {
				base = 5
			}

			
			option = {
				token = sp_mirror_image_spell_failure_yes
				
				iteration_output = {
					country_effects = { 
						FROM = { add_project_progress_ratio = constant:sp_progress.loss.medium }
					}

					scientist_effects = {
						add_scientist_xp = {
							experience = constant:sp_scientist_xp_gain.low
							specialization = specialization_laboratory
						}
						injure_scientist_for_days = 20
					}
				}
			}

			option = {
				token = sp_mirror_image_spell_failure_no
				
				iteration_output = {
					country_effects = { 
						FROM = { add_project_progress_ratio = constant:sp_progress.loss.low }
					}

					scientist_effects = {
						injure_scientist_for_days = 60
					}
				}
			}

        }

	}
}


