on_actions = {
	# country
	on_new_term_election = {
		random_events = {
		}
	}

	# Ace pilots
	# country, FROM = ace
	on_ace_promoted = {
		random_events = {
			100 = ace_promoted.1
			5 = ace_promoted.2
		}
	}

	# country, FROM = ace, PREV = enemy ace
	# This event fires twice, once for each ace.
	on_aces_killed_each_other = {
		random_events = {
			100 = aces_killed_each_other.1
		}
	}

	# country, FROM = our ace,
	# PREV = enemy ace, has killed FROM
	on_ace_killed_by_ace = {
		random_events = {
			100 = ace_killed_by_ace.1
		}
	}

	# country, FROM = our ace,
	# PREV = enemy ace, killed by FROM
	on_ace_killed_other_ace = {
		random_events = {
			100 = ace_killed_other_ace.1
		}
	}

	# country, FROM = ace
	on_ace_killed = {
		random_events = {
			100 = ace_died.1
		}
	}

	# During justifying wargoals
	# triggered daily, so make sure there is a sink somewhere not firing events
	# country, FROM = target nation
	on_justifying_wargoal_pulse = {

		random_events = {
			100 = war_justification.1
			100 = war_justification.2
			100 = war_justification.3
			100 = war_justification.4
			100 = war_justification.5
			100 = war_justification.6
			100 = war_justification.7
			100 = war_justification.8
			100 = war_justification.9
			100 = war_justification.10
			100 = war_justification.11
			100 = war_justification.12
			100 = war_justification.13
			100 = war_justification.14
			100 = war_justification.15
			100 = war_justification.16
			100 = war_justification.17
			100 = war_justification.18
			100 = war_justification.19
			17000 = 0
		}
	}

	on_wargoal_expire = {
		random_events = {
			100 = war_justification.301
		}
	}

	on_nuke_drop = {

		
	}

	# country random events
	#on_bi_yearly_pulse = {
	#
	#}

	#on_five_year_pulse = {
	#
	#}

	on_border_war_lost = {
		effect = {
			owner = {
				country_event = { id = china.14 }
				country_event = { id = china.16 }
			}
		}
	}

	on_leave_faction = {
		effect = {
			FROM = {
				add_opinion_modifier = {
					modifier = faction_traitor
					target = ROOT
					days = 365
				}

				add_opinion_modifier = {
					modifier = faction_traitor_trade
					target = ROOT
					days = 365
				}
			}
		}
	}

	#FROM is the one that joins the faction
	on_create_faction = {
		effect = {

		}
	}

	#FROM is country getting invited.
	on_offer_join_faction = {
		effect = {

		}
	}

	#FROM is faction leader on join faction requests.
	on_join_faction = {
		effect = {
			if = {
				limit = {
					FROM = {
						tag = ROH
						is_ally_with = MOR
					}
					NOT = { has_global_flag = rohan_has_fallen }
				}
				set_global_flag = rohan_has_fallen
				add_to_variable = { global.ring_mor_max_attempts = 1 }
			}
			if = {
				limit = {
					FROM = {
						tag = GON
						is_ally_with = MOR
					}
					NOT = { has_global_flag = gondor_has_fallen }
				}
				set_global_flag = gondor_has_fallen
				add_to_variable = { global.ring_mor_max_attempts = 1 }
			}
			if = {
				limit = {
					FROM = {
						tag = RIV
						is_ally_with = MOR
					}
					NOT = { has_global_flag = rivendell_has_fallen }
				}
				set_global_flag = rivendell_has_fallen
				add_to_variable = { global.ring_mor_max_attempts = 1 }
			}
		}
	}

	#FROM is war target
	on_declare_war = {
		effect = {

		}
	}

	# When a new faction is formed
	on_faction_formed = {
		effect = {

		}
	}

	# ROOT is capitulated country, FROM is winner
	on_capitulation = {
		effect = {

			## LOTR mod specific stuff starts here
			if = {
				limit = { ring_has_the_ring = yes }

				# transfer the ring from loser to winner
				FROM = { ring_seize_ring = yes }
			}
			if = {
				limit = {
					ROOT = { tag = ROH }
					FROM = {
						OR = {
							has_government = belligerent
							is_ally_with = MOR
							tag = ISE
						}
					}
					NOT = { has_global_flag = rohan_has_fallen }
				}
				set_global_flag = rohan_has_fallen
				add_to_variable = { global.ring_mor_max_attempts = 1 }
			}
			if = {
				limit = {
					ROOT = { tag = GON }
					FROM = {
						OR = {
							has_government = belligerent
							is_ally_with = MOR
						}
					}
					NOT = { has_global_flag = gondor_has_fallen }
				}
				set_global_flag = gondor_has_fallen
				add_to_variable = { global.ring_mor_max_attempts = 1 }
			}
			if = {
				limit = {
					ROOT = { tag = RIV }
					FROM = {
						OR = {
							has_government = belligerent
							is_ally_with = MOR
						}
					}
					NOT = { has_global_flag = rivendell_has_fallen }
				}
				set_global_flag = rivendell_has_fallen
				add_to_variable = { global.ring_mor_max_attempts = 1 }
			}

			## LOTR mod specific stuff ends here

			news_event = { id = country_capitulated.0 days = 0 }
		}
	}

	# ROOT is previously capitualted country
	on_uncapitulation = {
		effect = {

		}
	}

	on_government_change = {
		effect = {

		}
	}

	on_coup_succeeded = {
		effect = {
			
		}
	}

	#ROOT is winner #FROM gets annexed - This will also fire on_annex
	on_civil_war_end = {
		effect = {

		}
	}

	#ROOT is winner #FROM gets annexed - For civil wars on_civil_war_end is also fired
	on_annex = {
		effect = {
			## LOTR mod specific stuff starts here
			if = {
				limit = { FROM = { ring_has_the_ring = yes } }

				# transfer the ring from loser to winner
				FROM = { ring_seize_ring = yes }
			}
			## LOTR mod specific stuff ends here
		}
	}

	#Not run on a specific country.
	on_startup = {
		effect = {
			
		}
	}

	#ROOT is new controller #FROM is old controller #FROM.FROM is state ID
	on_state_control_changed = {
		effect = {

		}
	}
}
